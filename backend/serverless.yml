service: caverna
provider:
  name: aws
  runtime: nodejs8.10
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ConnectionsTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConnectionsTable, Arn]
              - '*'
  environment:
    CONNECTIONS_TABLE:
      Ref: ConnectionsTable
    API_REGION: "${self:provider.region}"
    ENDPOINT: "https://e8n9ravuvg.execute-api.us-west-1.amazonaws.com/dev"

  # optional
  websocketApiName: caverna-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action


plugins:
  - serverless-websockets-plugin

functions:
  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    events:
      - websocket:
          routeKey: $connect
      - websocket:
          routeKey: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane resposne
  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          routeKey: $default

  # handle chat app messages
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          routeKey: sendMessage

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
